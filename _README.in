changequote(`{', `}'){}dnl

# pycro

> $ wc pycro \
  esyscmd({wc pycro}){}dnl

list of contents:
- [introduction](#introduction)
- [usage example](#usage-example)
- [documentation](#documentation)

## introduction
Pycro is a python integrated macro preprocessor. It will interpret input texts
and generates a corresponding python code that will generate the intended
result, if we compile and execute that.

## usage example
> coming soon ...

## documentation
- [How pycro works](#How-pycro-works)
- [API](#API)
- [command line interface](#command-line-interface)

### How pycro works
> coming soon

```
def generate_code(infile, outfile, env):
	for variable_name in (
			'code_generators',

			'macro_prefix', 		'macro_suffix', 		'macro_re',

			'statement_prefix', 	'statement_suffix',

			'comment_prefix', 		'comment_suffix',

			'evaluation_variable_re',

			):

		globals()[name] = getattr(env, name)

	for line in infile:

		striped_line = line.strip(_SPACE_CHARS)

		def starts_and_ends_with(string, prefix, suffix):
			return string.startswith(prefix) and string.endswith(suffix)

		def strip_prefix_suffix(string, prefix, suffix):
			return string[ len(prefix) : len(string) - len(suffix) ]

		# --- check macro ---

		if starts_and_ends_with(striped_line, macro_prefix, macro_suffix):

			macro_striped_line = strip_prefix_suffix(string, macro_prefix, macro_suffix)

			m = macro_re.fullmatch(macro_striped_line):
			if m:
				
```

### API
> coming soon ...

### command line interface
__`$ pycro --help`__:
```
esyscmd({./pycro --help}){}dnl
```

